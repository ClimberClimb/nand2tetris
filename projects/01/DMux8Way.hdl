// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // Put your code here:
    DMux4Way(in=in, sel=sel[0..1], a=dmuxa, b=dmuxb, c=dmuxc, d=dmuxd);
    DMux4Way(in=in, sel=sel[0..1], a=dmuxe, b=dmuxf, c=dmuxg, d=dmuxh);
    Not(in=sel[2], out=notsel2);
    Mux(a=dmuxa, b=notsel2, sel=sel[2], out=a);
    Mux(a=dmuxb, b=notsel2, sel=sel[2], out=b);
    Mux(a=dmuxc, b=notsel2, sel=sel[2], out=c);
    Mux(a=dmuxd, b=notsel2, sel=sel[2], out=d);
    Mux(a=sel[2], b=dmuxe, sel=sel[2], out=e);
    Mux(a=sel[2], b=dmuxf, sel=sel[2], out=f);
    Mux(a=sel[2], b=dmuxg, sel=sel[2], out=g);
    Mux(a=sel[2], b=dmuxh, sel=sel[2], out=h);
}

// CHIP DMux8Way {
//    IN in, sel[3];
//     OUT a, b, c, d, e, f, g, h;
// 
//     PARTS:
//     DMux(in=in,sel=sel[2],a=out1,b=out2);
//     DMux4Way(in=out1,sel=sel[0..1],a=a,b=b,c=c,d=d);
//     DMux4Way(in=out2,sel=sel[0..1],a=e,b=f,c=g,d=h);
// }