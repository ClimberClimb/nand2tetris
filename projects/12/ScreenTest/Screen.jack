// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array mask;
    static int color;

    /** Initializes the Screen. */
    function void init() {
        let color = 1;
        let mask = Array.new(16);
        let mask[15] = 32767;
        let mask[14] = -16385;
        let mask[13] = -8193;
        let mask[12] = -4097;
        let mask[11] = -2049;
        let mask[10] = -1025;
        let mask[9] = -513;
        let mask[8] = -257;
        let mask[7] = -129;
        let mask[6] = -65;
        let mask[5] = -33;
        let mask[4] = -17;
        let mask[3] = -9;
        let mask[2] = -5;
        let mask[1] = -3;
        let mask[0] = -2;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int value;
        var int i;
        var int address;

        let value = 0;
        let address = 16384;
        let i = 0;
        while (address < 8192) {
            do Memory.poke(address + i, value);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = 1;
        } else {
            let color = 0;
        }
        return;
    }

    function int pow(int x, int y) {
        var int j;
        var int sum;

        let j = 0;
        let sum = 1;
        while (j < y) {
            let sum = sum * x;
            let j = j + 1;
        }
        return sum;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int maskval;
        var int index;
        var int temp;

        let address = (16384 + (32 * y) + (x / 16));
        let index = (x - ((x / 16) * 16));
        let maskval = mask[index];
        let value = Memory.peek(address);
        let value = maskval & value;
        let temp = color * Screen.pow(2, index);
        let value = value | temp;
        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx;
        var int dy;
        var int a;
        var int b;
        var int adyMinuxbdx;
        var int signx;
        var int signy;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;
        let adyMinuxbdx = 0;

        if (y1 < y2) {
            let signy = 1;
        } else {
            let signy = -1;
        }

        if (x1 < x2) {
            let signx = 1;
        } else {
            let signx = -1;
        }

        if (dx = 0) {
            while (~(b > dy)) {
                do Screen.drawPixel(x1, y1 + (b * signy));
                let b = b + 1;
            }
            return;
        }

        if (dy = 0) {
            while (~(a > dx)) {
                do Screen.drawPixel(x1 + (a * signx), y1);
                let a = a + 1;
            }
            return;
        }

        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel((x1 + (a * signx)), (y1 + (b * signy)));
            if (adyMinuxbdx < 0) {
                let a = a + 1;
                let adyMinuxbdx = adyMinuxbdx + dy;
            } else {
                let b = b + 1;
                let adyMinuxbdx = adyMinuxbdx - dx;
            }       
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a;
        var int dx;
        var int x;

        let dx = Math.abs(x1 - x2);
        if (x1 < x2) {
            let x = x1;
        } else {
            let x = x2;
        }
        while (a < dx) {
            do Screen.drawLine(x + a, y1 , x + a, y2);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int num;
        var int r2;
        var int dy2;

        if (r > 181) {
            return;
        }

        let r2 = r * r;
        let dy = -r;
        while (dy < r) {
            let dy2 = dy * dy;
            let num = Math.sqrt(r2 - dy2);
            do Screen.drawLine(x - num, y + dy, x + num, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
