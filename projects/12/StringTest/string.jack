// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len;
    field int maxlen;
    field Array item;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {      
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let len = 0;
        let maxlen = maxLength;
        let item = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do item.dispose();   
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return item[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let item[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxlen) {
            let item[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
            let item[len] = null;
        }
        return;
    }

    function int pow(int x, int y) {
        var int j;
        var int sum;

        let j = 0;
        let sum = 1;

        while (j < y) {
            let sum = sum * x;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int value;
        var int sum;
        var int num;
        var int sign;

        let i = 0;
        let sum = 0;

        let sign = charAt(0);
        if (sign = 45) {
            let i = 1;
        } else {
            let i = 0;
        }

        while (i < len) {
            let value = charAt(i);
            if ((47 < value) & (58 > value)) {
                let num = value - 48;
                let sum = sum + (num * String.pow(10, len - i - 1));
                let i = i + 1;
            } else {
                let i = len;
            }
        }

        if (sign = 45) {
            return -1 * sum;
        } else {
            return sum;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int len1;
        var int remain;
        var int i;
        var int item;
        var int mod;
        
        let len1 = 0;
        let i = 0;
        let remain = Math.abs(val);
        let mod = 0;
        
        while (remain > 0) {
            let remain = remain / 10;
            let len1 = len1 + 1;
        }
        
        let remain = Math.abs(val);
        let i = 0;
        if (val < 0) {
            let len1 = len1 + 1;
        }
        while (i < len1) {
            let mod = remain / 10;
            let item = remain - (mod * 10);
            do setCharAt(len1 - i - 1, item + 48);
            let i = i + 1;
            let remain = remain / 10;
        } 
        
        if (val < 0) {
           do setCharAt(0, 45);
        }

        let len = len1;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
